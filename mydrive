#!/bin/bash

################################################################
#Author: spino
#
#this script represents a simplified interface for using gdrive.
#It allows to upload and download files without having to search
#for file or folder IDs.
################################################################

n_args=$#

#check whether there is at least one argument
if [ $n_args -lt 1 ]
then
        echo "Error. Missing argument."
        exit
fi



arg=$1


#main case construct to discriminate between options
case $arg in


	-h|--help)											#help option
	echo
	echo "Upload or download automatically files to/from google drive."
	echo "Usage:"
	echo "mydrive <option> <arguments>"
	echo
	echo "-h, --help 						Print this help message and exit."
	echo "-d, --download <remote_file_name>				Download <remote_file_name>."
	echo "-o, --overwrite <remote_file_name>			Download <remote_file_name> and overwrite local file if it has the same name"
	echo "-u, --upload <local_file_name> <remote_folder>		Upload <local_file_name> into <remote_folder>."
	echo "-fu, --folderupdate <local_folder> <remote_folder>	Update the content of <remote_folder> by uploading/updating from <local_folder>."
	echo "-fd, --folderdownload <remote_folder> <local_folder>	Download the content of <remote_folder> into <local_folder>. Files that already exist locally are not downloaded."
	echo "-fo, --folderoverwrite <remote_folder> <local_folder>	Download the content of <remote_folder> into <local_folder> and overwrite files that already exist locally."
	echo
	;;


	-d|--download)											#download option
	if [ "$n_args" -ne 2 ]
	then
		echo "Error. Wrong number of arguments."
		exit
	fi
	remote_file_name="$2"
	gdrive download query "name='$remote_file_name'"							#download the file by using download query
	;;


	-o|--overwrite)
	if [ "$n_args" -ne 2 ]
	then
		echo "Error. Wrong number of arguments."
		exit
	fi
	remote_file_name=$2
	gdrive download query -f "name='$remote_file_name'"						#download by using download query with the -f option, which forces gdrive to overwrite the local file
	;;



	-u|--upload)											#upload option
	if [ "$n_args" -ne 3 ]
	then
		echo "Error. Wrong number of arguments."
		exit
	fi
	local_file_name="$2"
	remote_folder="$3"
	info=$(gdrive list --query "name='$remote_folder' and trashed=false" | grep " $remote_folder ")	#get ID of the remote folder to which the file must be uploaded
	remote_folder_ID="${info:0:33}"
	gdrive upload -p "$remote_folder_ID" "$local_file_name"						#upload by using upload -p (option -p allows to choose parent directory)
	;;


	-fu|--folderupdate)										#folder update option
	if [ "$n_args" -ne 3 ]
	then
		echo "Error. Wrong number of arguments."
		exit
	fi
	local_folder=$2
	remote_folder=$3
	info=$(gdrive list --query "name='$remote_folder' and trashed=false" | grep " $remote_folder ")	#get ID of remote folder to which files must be uploaded
	remote_folder_ID=${info:0:33}
	cd $local_folder										#move to the local folder from which files must be uploaded
	files=`ls`
	for local_file_name in $files										#examine files in the local folder one by one
		do
		remote_file_info=$(gdrive list --query "name='$local_file_name' and trashed=false and '$remote_folder_ID' in parents" | grep " $local_file_name ")	#verify whether there is a remote file with the same name as the local file
		remote_file_ID=${remote_file_info:0:33}
		if [ -z $remote_file_ID ]
		then
			gdrive upload -p $remote_folder_ID $local_file_name					#if there are no results (i.e. remote_file_ID is unset) then upload the local file into the remote directory
		else
			gdrive delete $remote_file_ID							#if there is already a remote file with the same name, delete it
			gdrive upload -p $remote_folder_ID $local_file_name					#and upload again
		fi
	done
	;;


	-fd|folderdownload)										#folder download option
	if [ $n_args -ne 3 ]
	then
		echo "Error. Wrong number of arguments."
		exit
	fi
	remote_folder=$2
	local_folder=$3
	info=$(gdrive list --query "name='$remote_folder' and trashed=false" | grep " $remote_folder ")	#get ID of remote folder from which files must be downloaded
	remote_folder_ID=${info:0:33}
	remote_content="$(gdrive list --query "trashed=false and '$remote_folder_ID' in parents")"	#get info on all the files inside the remote folder in a tabular format
	SAVEIFS=$IFS											#save IFS
	IFS=$'\n'											#and temporarily set it to linefeed in order to convert info into an array. Each element of the array corresponds to a line of the table.
	remote_content_array=($remote_content)								#generate array
	IFS=$SAVEIFS											#restore IFS to the space character
	cd $local_folder										#move to the local folder to which files must be dowloaded
	local_content=`ls`
	for((scan=0; scan<${#remote_content_array[@]}; scan++))						#scan remote_content_array
	do
		if [ $scan -ne 0 ]									#skip the first element
		then
			exist_flag=false								#exist_flag is used to memorize whether a file already exists in the remote folder
			line=${remote_content_array[$scan]}
			line_array=($line)								#extract remote file ID from remote_content_array
			remote_file_ID=${line_array[0]}							#extract name of the remote file from remote_content_array
			remote_file_name=${line_array[1]}
			for local_file_name in $local_content						#with a for loop check whether a file called file_name exists in the local directory
			do
				if [ $local_file_name = $remote_file_name ]
				then
					exist_flag=true							#if it exists, set exist_flag to true, otherwise leave its value to false
				fi
			done
			if [ $exist_flag = false ]
			then
				gdrive download $remote_file_ID						#if exist_flag is false then download the file
			else
				echo ""$remote_file_name" already existing, use -fo option to overwrite existing files."	#otherwise print a warning message and do not download
			fi
		fi
	done
	;;


	-fo|--folderoverwrite)
	if [ $n_args -ne 3 ]
	then
		echo "Error. Wrong number of arguments."
		exit
	fi
	remote_folder=$2
	local_folder=$3
	info=$(gdrive list --query "name='$remote_folder' and trashed=false" | grep " $remote_folder ")	#get remote folder ID
	remote_folder_ID=${info:0:33}
	cd $local_folder
	gdrive download query -f "'$remote_folder_ID' in parents"					#download by using download query with the -f option, which forces gdrive to overwrite the local file
	;;


	*)
	echo
	echo "Error. Invalid argument."
	echo
	echo "Usage:"
	echo "mydrive <option> <arguments>"
	echo
	echo "-h, --help 						Print this help message and exit."
	echo "-d, --download <remote_file_name>				Download <remote_file_name>."
	echo "-o, --overwrite <remote_file_name>			Download <remote_file_name> and overwrite local file if it has the same name"
	echo "-u, --upload <local_file_name> <remote_folder>		Upload <local_file_name> into <remote_folder>."
	echo "-fu, --folderupdate <local_folder> <remote_folder>	Update the content of <remote_folder> by uploading/updating from <local_folder>."
	echo "-fd, --folderdownload <remote_folder> <local_folder>	Download the content of <remote_folder> into <local_folder>. Files that already exist locally are not downloaded."
	echo "-fo, --folderoverwrite <remote_folder> <local_folder>	Download the content of <remote_folder> into <local_folder> and overwrite files that already exist locally."
	echo
	;;


esac
